<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cybernetic Coffee</title>
    <link>https://cybernetic.coffee/</link>
    <description>Recent content on Cybernetic Coffee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://cybernetic.coffee/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learn Source Code Auditing By Building a Tool #2: POC and Pattern Analysis for Basic Vulnerabilities</title>
      <link>https://cybernetic.coffee/blog/learn-source-code-auditing_2/</link>
      <pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/blog/learn-source-code-auditing_2/</guid>
      <description>I already rambled about what source code auditing is, why we do it, and its pros vs cons over dynamic analysis. So in this post I&amp;rsquo;ll present some basic vulnerabilities we can look for in audits and how we might build a tool for their detection using simple pattern matching and rules.
Key Terms  Signature: An encapsulating term to refer to both a set of rules and a description of what the rule aims to detect and why the matching of such a rule could indicate the presence of a vulnerability Rule: A regex pattern with a specific detection goal under a particular signature Regex: Regular expressions are a way of specifying a search pattern particular for natural languages  What are we Building?</description>
    </item>
    
    <item>
      <title>TMU CTF: Writeups</title>
      <link>https://cybernetic.coffee/blog/tmu-ctf/</link>
      <pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/blog/tmu-ctf/</guid>
      <description>This was a well rounded CTF in my opinion with good challenges for beginners (like me) that were not too trivial. Instead of the standard robots.txt or source code inspection they had challenges where one could easily find clues to get started researching the challenges. That is even if the solution wasn&amp;rsquo;t immediately clear you had at least some direction for a google search and a shot at solving the challenge during the CTF runtime.</description>
    </item>
    
    <item>
      <title>Learn Source Code Auditing By Building a Tool #1: Static Analysis for the Dynamically Paralysed</title>
      <link>https://cybernetic.coffee/blog/learn-source-auditing-1/</link>
      <pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/blog/learn-source-auditing-1/</guid>
      <description>Source code auditing/analysis is like taking the blueprint for a car and trying to find flaws in the design before it is ever built and sold to the public. This has advantages over just testing the car once it has been manufactured but is not without flaws. It&amp;rsquo;s much easier to miss things when presented with a massively complex system whose operations may only be visualized or imagined. Of course it is also possible to have both a fully constructed model and a blueprint with which to audit the car for flaws.</description>
    </item>
    
    <item>
      <title>Forgotten pwntools</title>
      <link>https://cybernetic.coffee/blog/forgotten-pwntools/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/blog/forgotten-pwntools/</guid>
      <description>You&amp;rsquo;d think after searching for /bin/sh in libc that many times in pwntools that I&amp;rsquo;d remember the syntax. But actually my brain is too busy remembering when the milk in the fridge expires. Here&amp;rsquo;s a collection of my favorite forgotten syntactic gems for pwntools.
General flat payload = flat({ # pad with garbage to this offset cyclic_find(&amp;#39;amia&amp;#39;): rop.chain() }) custom filler
alphabet = &amp;#39;bcdefhijklmnopqrstuvwyz&amp;#39; # cleansed alphabet payload = fit({ cyclic_find(&amp;#39;nbbb&amp;#39;, alphabet=bet): rop.</description>
    </item>
    
    <item>
      <title>Reversing 31 Binaries for No Fun and Regret</title>
      <link>https://cybernetic.coffee/blog/reversing-34-binaries/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/blog/reversing-34-binaries/</guid>
      <description>&amp;ldquo;If you know the enemy and know yourself, you need not fear the result disassembly of a hundred battles 31 binaries.&amp;quot;
&amp;ndash; Sun Tzu, The Art of War Exploitation
 Overview So you want to hack a program? Go to nsogroup.com &amp;hellip;
Reverse engineering, or &amp;lsquo;reversing&amp;rsquo;, is the process of taking something whose inner workings are not immediately clear or incredibly complex and making sense of them. Thus we see that reversing is not just a skill for security engineers but for all engineers, programmers and problem solvers.</description>
    </item>
    
    <item>
      <title>Basic Stack Based Overflows</title>
      <link>https://cybernetic.coffee/blog/basic-stack-based-overflows/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/blog/basic-stack-based-overflows/</guid>
      <description>Overview Stack based buffer overflows are old as fuck. Like I was literally dead when the most advanced techniques for exploiting them were conceived. However pwntools is a exploitation framework that has been around for a much shorter period of time and adds a new level of simplicity which makes exploit development more approachable. Of course there exist a great number of better binary exploitation courses and guides, a few of which I will link in the resources section bellow.</description>
    </item>
    
    <item>
      <title>Web Application Testing Methodologies</title>
      <link>https://cybernetic.coffee/blog/web-app-testing-methodologies/</link>
      <pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/blog/web-app-testing-methodologies/</guid>
      <description>Testing Modern Web Applications The modern web application is a mass of complex interwoven components neatly hidden away behind a clean and responsive user interface (UI). However, once you start unplugging the cords from the frontend framework the scope of the application becomes clear and the attack surface large. In a world where testers are increasingly short on time and/or daunted by the scope of vulnerabilities to test for how can we ensure coverage without forfeiting time?</description>
    </item>
    
    <item>
      <title>Building A REST API</title>
      <link>https://cybernetic.coffee/blog/building-a-rest-api/</link>
      <pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/blog/building-a-rest-api/</guid>
      <description>The Power Of REST APIs REST APIs are a way to conveniently abstract away application logic and reduce the load on front-end processing. This is achieved by engineering the API to return data in such a way that we can simply render it straight out onto the page without sorting or intensive manipulation. In this way we can achieve faster load times for web pages, and at the same time reduce the amount of JavaScript running in users browsers.</description>
    </item>
    
    <item>
      <title>Activity Feed</title>
      <link>https://cybernetic.coffee/feed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/feed/</guid>
      <description>import { Octokit } from &#34;https://cdn.skypack.dev/@octokit/core&#34;; const octokit = new Octokit(); // Fetch recent activity from GitHub window.pullFeed = async function pullFeed(){ await octokit.request(&#39;GET /users/{username}/events/public&#39;, { username: &#39;Angus-C-git&#39;, page: 1, per_page: 30 }).then(response = { console.log(response); let nonSelected = document.getElementById(&#39;twitter&#39;); nonSelected.classList.remove(&#39;feed-selected&#39;); nonSelected.classList.add(&#39;feed-non-selected&#39;); let selected = document.getElementById(&#39;github&#39;); selected.classList.remove(&#39;feed-non-selected&#39;); selected.classList.add(&#39;feed-selected&#39;); let feed = document.getElementById(&#34;feed&#34;); feed.innerHTML = &#39;&#39;; document.getElementById(&#39;loader&#39;).innerHTML = &#34; &#34;; response.data.map(event = { let eventBody = null; switch (event.type) { case &#34;</description>
    </item>
    
    <item>
      <title>Capture The Flag</title>
      <link>https://cybernetic.coffee/ctf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/ctf/</guid>
      <description>Coming soon ...  Welcome ______  &#34;The year is 2084. A company called SharpNet control over 80% of traffic on the internet. A resistance company OpenWaves seeks to restore balance to the internet. You work as a ghost for the resistance hacking SharpNet systems in an effort to protect the original mission of the internet.&#34;   OSINT Acquisition 150pts  0 Solves   NextStart has just been acquired by SharpNet.</description>
    </item>
    
    <item>
      <title>CDC Generator</title>
      <link>https://cybernetic.coffee/all-projects/cdc-generator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/all-projects/cdc-generator/</guid>
      <description>Coming soon &amp;hellip;</description>
    </item>
    
    <item>
      <title>Cookie Forge</title>
      <link>https://cybernetic.coffee/all-projects/cookie-forge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/all-projects/cookie-forge/</guid>
      <description>Coming soon &amp;hellip;</description>
    </item>
    
    <item>
      <title>Cybernetic Coffee CTF</title>
      <link>https://cybernetic.coffee/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/about/</guid>
      <description>A CTF inspired by the real world.</description>
    </item>
    
    <item>
      <title>Leaderboard</title>
      <link>https://cybernetic.coffee/leaderboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/leaderboard/</guid>
      <description> Rank Username Points     (function getLeaderboard() { console.log(&#34;[] Pulling leaderboard&#34;); const url = &#39;https://cybernetic-coffee-api.herokuapp.com/api/ctf/leaderboard&#39;; const token = &#39;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MDU1ZDA4ZWYyNDM2ODNlNmUxYjk5ZTEiLCJpYXQiOjE2MTYyMzY2ODZ9.cRXLq8FmfH4qstR0qNWyiuW4HyGgIKf2fDS5VdFA_tI&#39;; fetch(url, { method: &#39;GET&#39;, mode: &#39;cors&#39;, redirect: &#39;follow&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, //TODO: remove this &#39;auth-token&#39;: token } }) .then(response = response.json()) .then(result = { let rows = document.getElementById(&#39;leaderboard-inject&#39;); console.log(result.leaderboard); result.leaderboard.map((row, count=1) = { rows.innerHTML += `${count} ${row.usrName} ${row.score} ` }) }) .catch(error = console.log(&#39;error&#39;, error)); })(); </description>
    </item>
    
    <item>
      <title>Live Breach Timeline</title>
      <link>https://cybernetic.coffee/all-projects/livebreachtimeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/all-projects/livebreachtimeline/</guid>
      <description>      </description>
    </item>
    
    <item>
      <title>Need To Know Crypto</title>
      <link>https://cybernetic.coffee/all-projects/need-to-know-crypto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/all-projects/need-to-know-crypto/</guid>
      <description>Coming soon &amp;hellip;</description>
    </item>
    
    <item>
      <title>OTP-Cracker</title>
      <link>https://cybernetic.coffee/all-projects/otp-cracker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/all-projects/otp-cracker/</guid>
      <description>Coming soon &amp;hellip;</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://cybernetic.coffee/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/projects/</guid>
      <description>Loading ...     import { Octokit } from &#34;https://cdn.skypack.dev/@octokit/core&#34;; const octokit = new Octokit(); (async function pullRepos(){ const excludedRepos = [&#34;Angus-C-git&#34;, &#34;insurance-management-system&#34;, &#34;ipcalc&#34;, &#34;freeCodeCamp&#34;, &#34;first-contributions&#34;]; const specials = [&#34;LiveBreachTimeline&#34;]; await octokit.request(&#39;GET /users/{username}/repos&#39;, { username: &#39;Angus-C-git&#39;, page: 1, per_page: 30 }).then(response = { let timeLine = document.getElementById(&#34;projects-timeline&#34;); timeLine.innerHTML = &#39;&#39;; response.data.sort(function(a,b){ return new Date(b.created_at) - new Date(a.created_at); }); response.data.map(project = { if (!excludedRepos.includes(project.name)) timeLine.innerHTML += `${project.created_at.slice(0,7)}    ${project.</description>
    </item>
    
    <item>
      <title>Verto</title>
      <link>https://cybernetic.coffee/all-projects/verto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/all-projects/verto/</guid>
      <description>Coming soon &amp;hellip;</description>
    </item>
    
  </channel>
</rss>
