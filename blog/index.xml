<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Cybernetic Coffee</title>
    <link>https://cybernetic.coffee/blog/</link>
    <description>Recent content in Blogs on Cybernetic Coffee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://cybernetic.coffee/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Basic Stack Based Overflows</title>
      <link>https://cybernetic.coffee/blog/basic-stack-based-overflows/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/blog/basic-stack-based-overflows/</guid>
      <description>Overview Stack based buffer overflows are old as fuck. Like I was literally dead when the most advanced techniques for exploiting them were conceived. However pwntools is a exploitation framework that has been around for a much shorter period of time and adds a new level of simplicity which makes exploit development more approachable. Of course there exist a great number of better binary exploitation courses and guides, a few of which I will link in the resources section bellow.</description>
    </item>
    
    <item>
      <title>Web Application Testing Methodologies</title>
      <link>https://cybernetic.coffee/blog/web-app-testing-methodologies/</link>
      <pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/blog/web-app-testing-methodologies/</guid>
      <description>Testing Modern Web Applications The modern web application is a mass of complex interwoven components neatly hidden away behind a clean and responsive user interface (UI). However, once you start unplugging the cords from the frontend framework the scope of the application becomes clear and the attack surface large. In a world where testers are increasingly short on time and/or daunted by the scope of vulnerabilities to test for how can we ensure coverage without forfeiting time?</description>
    </item>
    
    <item>
      <title>Building A REST API</title>
      <link>https://cybernetic.coffee/blog/building-a-rest-api/</link>
      <pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/blog/building-a-rest-api/</guid>
      <description>The Power Of REST APIs REST APIs are a way to conveniently abstract away application logic and reduce the load on front-end processing. This is achieved by engineering the API to return data in such a way that we can simply render it straight out onto the page without sorting or intensive manipulation. In this way we can achieve faster load times for web pages, and at the same time reduce the amount of JavaScript running in users browsers.</description>
    </item>
    
  </channel>
</rss>
