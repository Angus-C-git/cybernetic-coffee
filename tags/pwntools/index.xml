<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pwntools on Cybernetic Coffee</title>
    <link>https://cybernetic.coffee/tags/pwntools/</link>
    <description>Recent content in pwntools on Cybernetic Coffee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://cybernetic.coffee/tags/pwntools/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ROP Emporium Revisited</title>
      <link>https://cybernetic.coffee/blog/rop-emporium-revisited/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/blog/rop-emporium-revisited/</guid>
      <description>Overview ROP highlights a classical strategy across all facets of security exploitation, living off the land.
ret2win #2 ret2win is the first challenge among the rop emporium suite and plays out like a classical buffer overflow. The only real takeaway from this challenge is to note the state of the memory protections enabled for the binary.
Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) We see that the NX bit is enabled this is true of almost all ROP challenges since we wish to prevent execution off the stack with shellcode.</description>
    </item>
    
    <item>
      <title>Basic Stack Based Overflows</title>
      <link>https://cybernetic.coffee/blog/basic-stack-based-overflows/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/blog/basic-stack-based-overflows/</guid>
      <description>Overview Stack based buffer overflows are old as fuck. Like I was literally dead when the most advanced techniques for exploiting them were conceived. However pwntools is a exploitation framework that has been around for a much shorter period of time and adds a new level of simplicity which makes exploit development more approachable. Of course there exist a great number of better binary exploitation courses and guides, a few of which I will link in the resources section bellow.</description>
    </item>
    
  </channel>
</rss>
