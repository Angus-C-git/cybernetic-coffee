<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Binary Exploitation on Cybernetic Coffee</title>
    <link>https://cybernetic.coffee/categories/binary-exploitation/</link>
    <description>Recent content in Binary Exploitation on Cybernetic Coffee</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://cybernetic.coffee/categories/binary-exploitation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learn Source Code Auditing By Building a Tool #1: Static Analysis for the Dynamically Paralysed</title>
      <link>https://cybernetic.coffee/blog/learn-source-auditing-1/</link>
      <pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/blog/learn-source-auditing-1/</guid>
      <description>Source code auditing/analysis is like taking the blueprint for a car and trying to find flaws in the design before it is ever built and sold to the public. This has advantages over just testing the car once it has been manufactured but is not without flaws. It&amp;rsquo;s much easier to miss things when presented with a massively complex system whose operations may only be visualized or imagined. Of course it is also possible to have both a fully constructed model and a blueprint with which to audit the car for flaws.</description>
    </item>
    
    <item>
      <title>Forgotten pwntools</title>
      <link>https://cybernetic.coffee/blog/forgotten-pwntools/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/blog/forgotten-pwntools/</guid>
      <description>You&amp;rsquo;d think after searching for /bin/sh in libc that many times in pwntools that I&amp;rsquo;d remember the syntax. But actually my brain is too busy remembering when the milk in the fridge expires. Here&amp;rsquo;s a collection of my favorite forgotten syntactic gems for pwntools.
General flat payload = flat({ # pad with garbage to this offset cyclic_find(&amp;#39;amia&amp;#39;): rop.chain() }) custom filler
alphabet = &amp;#39;bcdefhijklmnopqrstuvwyz&amp;#39; # cleansed alphabet payload = fit({ cyclic_find(&amp;#39;nbbb&amp;#39;, alphabet=bet): rop.</description>
    </item>
    
    <item>
      <title>Reversing 31 Binaries for No Fun and Regret</title>
      <link>https://cybernetic.coffee/blog/reversing-34-binaries/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/blog/reversing-34-binaries/</guid>
      <description>&amp;ldquo;If you know the enemy and know yourself, you need not fear the result disassembly of a hundred battles 31 binaries.&amp;quot;
&amp;ndash; Sun Tzu, The Art of War Exploitation
 Overview So you want to hack a program? Go to nsogroup.com &amp;hellip;
Reverse engineering, or &amp;lsquo;reversing&amp;rsquo;, is the process of taking something whose inner workings are not immediately clear or incredibly complex and making sense of them. Thus we see that reversing is not just a skill for security engineers but for all engineers, programmers and problem solvers.</description>
    </item>
    
    <item>
      <title>Basic Stack Based Overflows</title>
      <link>https://cybernetic.coffee/blog/basic-stack-based-overflows/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cybernetic.coffee/blog/basic-stack-based-overflows/</guid>
      <description>Overview Stack based buffer overflows are old as fuck. Like I was literally dead when the most advanced techniques for exploiting them were conceived. However pwntools is a exploitation framework that has been around for a much shorter period of time and adds a new level of simplicity which makes exploit development more approachable. Of course there exist a great number of better binary exploitation courses and guides, a few of which I will link in the resources section bellow.</description>
    </item>
    
  </channel>
</rss>
